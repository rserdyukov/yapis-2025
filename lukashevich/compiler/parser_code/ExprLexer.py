# Generated from ExprLexer.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,34,215,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2,
        1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,
        1,6,1,6,1,6,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,
        1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,
        1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,
        1,18,1,19,1,19,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,21,1,22,
        1,22,1,23,1,23,1,24,1,24,1,25,1,25,1,26,1,26,1,27,1,27,1,28,1,28,
        1,28,1,28,1,28,1,29,4,29,170,8,29,11,29,12,29,171,1,30,3,30,175,
        8,30,1,30,5,30,178,8,30,10,30,12,30,181,9,30,1,30,3,30,184,8,30,
        1,30,4,30,187,8,30,11,30,12,30,188,1,31,1,31,1,31,1,31,5,31,195,
        8,31,10,31,12,31,198,9,31,1,31,1,31,1,32,1,32,5,32,204,8,32,10,32,
        12,32,207,9,32,1,33,4,33,210,8,33,11,33,12,33,211,1,33,1,33,0,0,
        34,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,1,
        0,7,1,0,48,57,2,0,43,43,45,45,1,0,46,46,1,0,34,34,3,0,65,90,95,95,
        97,122,4,0,48,57,65,90,95,95,97,122,3,0,9,10,13,13,32,32,223,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,1,69,1,0,0,0,3,74,1,0,
        0,0,5,81,1,0,0,0,7,84,1,0,0,0,9,89,1,0,0,0,11,94,1,0,0,0,13,98,1,
        0,0,0,15,101,1,0,0,0,17,104,1,0,0,0,19,106,1,0,0,0,21,108,1,0,0,
        0,23,110,1,0,0,0,25,112,1,0,0,0,27,114,1,0,0,0,29,116,1,0,0,0,31,
        118,1,0,0,0,33,122,1,0,0,0,35,128,1,0,0,0,37,134,1,0,0,0,39,140,
        1,0,0,0,41,146,1,0,0,0,43,148,1,0,0,0,45,151,1,0,0,0,47,153,1,0,
        0,0,49,155,1,0,0,0,51,157,1,0,0,0,53,159,1,0,0,0,55,161,1,0,0,0,
        57,163,1,0,0,0,59,169,1,0,0,0,61,174,1,0,0,0,63,190,1,0,0,0,65,201,
        1,0,0,0,67,209,1,0,0,0,69,70,5,102,0,0,70,71,5,117,0,0,71,72,5,110,
        0,0,72,73,5,99,0,0,73,2,1,0,0,0,74,75,5,114,0,0,75,76,5,101,0,0,
        76,77,5,116,0,0,77,78,5,117,0,0,78,79,5,114,0,0,79,80,5,110,0,0,
        80,4,1,0,0,0,81,82,5,105,0,0,82,83,5,102,0,0,83,6,1,0,0,0,84,85,
        5,116,0,0,85,86,5,104,0,0,86,87,5,101,0,0,87,88,5,110,0,0,88,8,1,
        0,0,0,89,90,5,101,0,0,90,91,5,108,0,0,91,92,5,115,0,0,92,93,5,101,
        0,0,93,10,1,0,0,0,94,95,5,102,0,0,95,96,5,111,0,0,96,97,5,114,0,
        0,97,12,1,0,0,0,98,99,5,105,0,0,99,100,5,110,0,0,100,14,1,0,0,0,
        101,102,5,97,0,0,102,103,5,115,0,0,103,16,1,0,0,0,104,105,5,40,0,
        0,105,18,1,0,0,0,106,107,5,41,0,0,107,20,1,0,0,0,108,109,5,123,0,
        0,109,22,1,0,0,0,110,111,5,125,0,0,111,24,1,0,0,0,112,113,5,44,0,
        0,113,26,1,0,0,0,114,115,5,46,0,0,115,28,1,0,0,0,116,117,5,59,0,
        0,117,30,1,0,0,0,118,119,5,105,0,0,119,120,5,110,0,0,120,121,5,116,
        0,0,121,32,1,0,0,0,122,123,5,99,0,0,123,124,5,111,0,0,124,125,5,
        108,0,0,125,126,5,111,0,0,126,127,5,114,0,0,127,34,1,0,0,0,128,129,
        5,112,0,0,129,130,5,105,0,0,130,131,5,120,0,0,131,132,5,101,0,0,
        132,133,5,108,0,0,133,36,1,0,0,0,134,135,5,105,0,0,135,136,5,109,
        0,0,136,137,5,97,0,0,137,138,5,103,0,0,138,139,5,101,0,0,139,38,
        1,0,0,0,140,141,5,102,0,0,141,142,5,108,0,0,142,143,5,111,0,0,143,
        144,5,97,0,0,144,145,5,116,0,0,145,40,1,0,0,0,146,147,5,61,0,0,147,
        42,1,0,0,0,148,149,5,61,0,0,149,150,5,61,0,0,150,44,1,0,0,0,151,
        152,5,62,0,0,152,46,1,0,0,0,153,154,5,60,0,0,154,48,1,0,0,0,155,
        156,5,43,0,0,156,50,1,0,0,0,157,158,5,45,0,0,158,52,1,0,0,0,159,
        160,5,47,0,0,160,54,1,0,0,0,161,162,5,42,0,0,162,56,1,0,0,0,163,
        164,5,32,0,0,164,165,5,45,0,0,165,166,5,62,0,0,166,167,5,32,0,0,
        167,58,1,0,0,0,168,170,7,0,0,0,169,168,1,0,0,0,170,171,1,0,0,0,171,
        169,1,0,0,0,171,172,1,0,0,0,172,60,1,0,0,0,173,175,7,1,0,0,174,173,
        1,0,0,0,174,175,1,0,0,0,175,183,1,0,0,0,176,178,7,0,0,0,177,176,
        1,0,0,0,178,181,1,0,0,0,179,177,1,0,0,0,179,180,1,0,0,0,180,182,
        1,0,0,0,181,179,1,0,0,0,182,184,7,2,0,0,183,179,1,0,0,0,183,184,
        1,0,0,0,184,186,1,0,0,0,185,187,7,0,0,0,186,185,1,0,0,0,187,188,
        1,0,0,0,188,186,1,0,0,0,188,189,1,0,0,0,189,62,1,0,0,0,190,196,5,
        34,0,0,191,195,8,3,0,0,192,193,5,34,0,0,193,195,5,34,0,0,194,191,
        1,0,0,0,194,192,1,0,0,0,195,198,1,0,0,0,196,194,1,0,0,0,196,197,
        1,0,0,0,197,199,1,0,0,0,198,196,1,0,0,0,199,200,5,34,0,0,200,64,
        1,0,0,0,201,205,7,4,0,0,202,204,7,5,0,0,203,202,1,0,0,0,204,207,
        1,0,0,0,205,203,1,0,0,0,205,206,1,0,0,0,206,66,1,0,0,0,207,205,1,
        0,0,0,208,210,7,6,0,0,209,208,1,0,0,0,210,211,1,0,0,0,211,209,1,
        0,0,0,211,212,1,0,0,0,212,213,1,0,0,0,213,214,6,33,0,0,214,68,1,
        0,0,0,10,0,171,174,179,183,188,194,196,205,211,1,6,0,0
    ]

class ExprLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    FUN = 1
    RETURN = 2
    IF = 3
    THEN = 4
    ELSE = 5
    FOR = 6
    IN = 7
    AS = 8
    LPAREN = 9
    RPAREN = 10
    LCURLY = 11
    RCURLY = 12
    COMMA = 13
    DOT = 14
    SEMI = 15
    TYPE_INT = 16
    TYPE_COLOR = 17
    TYPE_PIXEL = 18
    TYPE_IMAGE = 19
    TYPE_FLOAT = 20
    ASSIGN = 21
    EQ_EQ = 22
    GT = 23
    LT = 24
    PLUS = 25
    MINUS = 26
    DIV = 27
    MULT = 28
    OUT = 29
    INT = 30
    FLOAT = 31
    STRING = 32
    ID = 33
    WS = 34

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'func'", "'return'", "'if'", "'then'", "'else'", "'for'", "'in'", 
            "'as'", "'('", "')'", "'{'", "'}'", "','", "'.'", "';'", "'int'", 
            "'color'", "'pixel'", "'image'", "'float'", "'='", "'=='", "'>'", 
            "'<'", "'+'", "'-'", "'/'", "'*'", "' -> '" ]

    symbolicNames = [ "<INVALID>",
            "FUN", "RETURN", "IF", "THEN", "ELSE", "FOR", "IN", "AS", "LPAREN", 
            "RPAREN", "LCURLY", "RCURLY", "COMMA", "DOT", "SEMI", "TYPE_INT", 
            "TYPE_COLOR", "TYPE_PIXEL", "TYPE_IMAGE", "TYPE_FLOAT", "ASSIGN", 
            "EQ_EQ", "GT", "LT", "PLUS", "MINUS", "DIV", "MULT", "OUT", 
            "INT", "FLOAT", "STRING", "ID", "WS" ]

    ruleNames = [ "FUN", "RETURN", "IF", "THEN", "ELSE", "FOR", "IN", "AS", 
                  "LPAREN", "RPAREN", "LCURLY", "RCURLY", "COMMA", "DOT", 
                  "SEMI", "TYPE_INT", "TYPE_COLOR", "TYPE_PIXEL", "TYPE_IMAGE", 
                  "TYPE_FLOAT", "ASSIGN", "EQ_EQ", "GT", "LT", "PLUS", "MINUS", 
                  "DIV", "MULT", "OUT", "INT", "FLOAT", "STRING", "ID", 
                  "WS" ]

    grammarFileName = "ExprLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


