# ==============================================================================
# Пример 2: Функциональная генерация данных, файловый ввод/вывод и обработка
# Демонстрирует:
# - Создание матриц с помощью лямбда-функций.
# - Использование условного выражения (тернарного оператора).
# - Итерацию по матрице (построчно).
# - Явное преобразование типов (int) -> (float).
# - Работу с файлами: write_file() и read_file().
# - Использование встроенных утилитных функций (triag_upper, dimension).
# ==============================================================================

# Демонстрация синтаксиса лямбд с тернарным оператором для создания "рамочной" матрицы 5x5.
frame_matrix = [5][5](lambda r, c: 1 if r == 0 or r == 4 or c == 0 or c == 4 else 0)

write("Сгенерированная рамочная матрица:")
write(frame_matrix)

# Сохранение матрицы в .csv файл
write_file("frame_data.csv", frame_matrix)
write("Матрица сохранена в frame_data.csv")

# Загрузка данных из файла
loaded_matrix = read_file("frame_data.csv")


# Встроенная функция, вычисляющая размерность матриц и векторов
dims = dimension(loaded_matrix)
rows = dims[0]
cols = dims[1]
total_sum = 0.0

# Демонстрация итерации for..in по матрице
for row_vec in loaded_matrix:
    for element in row_vec:
        total_sum = total_sum + element

# Явное преобразование типов для корректного деления.
average = total_sum / (float)(rows * cols)

write("Среднее значение элементов в загруженной матрице:")
write(average)

# Работа встроенной функции для треугольных матриц.
upper_frame = triag_upper(frame_matrix)
write("Верхняя треугольная часть рамочной матрицы:")
write(upper_frame)

