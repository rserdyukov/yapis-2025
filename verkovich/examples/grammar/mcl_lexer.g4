// Файл: MCLLexer.g4
// Определение лексера для языка Matrix Computing Language (MCL)
lexer grammar mcl_lexer;

// Управляющие конструкции
IF: 'if';
ELSE: 'else';
WHILE: 'while';
UNTIL: 'until';
FOR: 'for';
IN: 'in';

// Определение функций
FUNC: 'func';
RETURN: 'return';
VOID_TYPE: 'void'; 

// Анонимные функции
LAMBDA: 'lambda';

// Логические операторы и значения
AND: 'and';
OR: 'or';
NOT: 'not';
TRUE: 'true';
FALSE: 'false';

// Названия встроенных типов
INT_TYPE: 'int';
FLOAT_TYPE: 'float';
VECTOR_TYPE: 'vector';
MATRIX_TYPE: 'matrix';
TUPLE_TYPE: 'tuple';
BOOLEAN_TYPE: 'boolean';
STRING_TYPE: 'string';

// Специальные числовые значения
NAN: 'NaN';
INFINITY: 'Infinity';


// Число с плавающей точкой
FLOAT: (DIGIT+ '.' DIGIT*) | ('.' DIGIT+);

// Целое число
INTEGER: DIGIT+;

// Строковый литерал в двойных кавычках
STRING: '"' ( ~["\r\n] )*? '"';


// Арифметические операторы
PLUS: '+';
MINUS: '-';
MUL: '*';
DIV: '/';
POW: '^';
MOD: '%';

// Операторы сравнения
EQ: '==';
NEQ: '!=';
GT: '>';
LT: '<';
GTE: '>=';
LTE: '<=';

// Операторы присваивания и доступа
ASSIGN: '=';
LPAREN: '(';   // Левая круглая скобка
RPAREN: ')';   // Правая круглая скобка
LBRACE: '{';   // Левая фигурная скобка
RBRACE: '}';   // Правая фигурная скобка
LBRACK: '[';   // Левая квадратная скобка
RBRACK: ']';   // Правая квадратная скобка
VBAR: '|';     // Вертикальная черта (для нормы и определителя)
COMMA: ',';
COLON: ':';
ARROW: '->';   // Для указания типа возвращаемого значения функции
QMARK: '?';    // Для явного, но опционального указания типа


// Идентификатор (имена переменных, функций и т.д.)
// Должен идти после всех ключевых слов, чтобы они имели приоритет.
IDENTIFIER: [a-zA-Z_] [a-zA-Z0-9_]*;

// Комментарии (игнорируются лексером)
COMMENT: '#' ~[\r\n]* -> skip;

// Пробельные символы 
WS: [ \t]+ -> skip;

// Новая строка - важна для определения конца выражений и для логики отступов
NL: ( '\r'? '\n' | '\r' );


// Виртуальные токены для обработки блоков с отступами
INDENT: 'indent';
DEDENT: 'dedent';


// Вспомогательные фрагменты (не являются самостоятельными токенами)
fragment DIGIT: [0-9];