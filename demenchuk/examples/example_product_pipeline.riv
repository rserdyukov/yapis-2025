def apply_margin(product, percentage):
    product.price = product.price * (1 + percentage / 100)
    return product

def apply_margin(product, margin_info):
    if margin_info.type == "fixed":
        product.price = product.price + margin_info.value
    else:
        product.price = product.price * (1 + margin_info.value / 100)
    return product

def increase_quantity(item, multiplier):
    item.quantity = item.quantity * multiplier
    return item

def calculate_total_cost(accumulator, product):
    new_total = accumulator.total + product.price * product.quantity
    return {total: new_total}

products = [
    {id: 1, name: "Laptop", category: "Electronics", price: 1200, quantity: 10},
    {id: 2, name: "Mouse", category: "Electronics", price: 25, quantity: 50},
    {id: 3, name: "Book", category: "Stationery", price: 15, quantity: 100},
    {id: 4, name: "Keyboard", category: "Electronics", price: 75, quantity: 30}
]

initial_accumulator = {total: 0}

products
    |> filter(p -> p.category == "Electronics")
    |> map(p -> apply_margin(p, 10.0))
    |> map(p -> increase_quantity(p, 2))
    |> reduce(calculate_total_cost, initial_accumulator)
    |> write()
